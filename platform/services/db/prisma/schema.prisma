// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
  // output          = "./client"
}

generator zod {
  provider                 = "zod-prisma-types"
  output                   = "../src/models" // default is ./generated/zod
  useMultipleFiles         = true // default is false
  // writeBarrelFiles                 = false // default is true
  createInputTypes         = false // default is true
  // createModelTypes                 = false // default is true
  addInputTypeValidation   = false // default is true
  // addIncludeType                   = false // default is true
  // addSelectType                    = false // default is true
  // validateWhereUniqueInput         = false // default is true
  // createOptionalDefaultValuesTypes = true // default is false
  // createRelationValuesTypes        = true // default is false
  // createPartialTypes               = true // default is false
  // useDefaultValidators             = false // default is true
  // coerceDate                       = false // default is true
  writeNullishInModelTypes = true // default is false
  // prismaClientPath         = "../../../prisma/client" // default is client output path
}

datasource db {
  provider   = "postgresql"
  url        = env("DB_URL")
  directUrl  = env("DB_DIRECT_URL")
  extensions = [pgcrypto(schema: "extensions"), uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

model User {
  // Essential fields
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Business fields
  name String? @map("name")

  // Relations
  accounts Account[]

  @@map("users")
}

// The model contains information to identify the user with the IDP
model Account {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("accounts")
}
