name: '[ON_CALL][CI] apps'
on:
  workflow_call:
    inputs:
      apps:
        description: 'Space separated app names'
        required: true
        type: string
      willBuild:
        description: 'Should build the app'
        required: false
        type: boolean
        default: false

jobs:
  lint-and-tests:
    runs-on: ubuntu-22.04
    container: 'node:22'
    services:
      pgsql-repo-template.botfi.localhost:
        image: 'postgres:17'
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: secret
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 1s
          --health-retries 5
    env:
      CI: true
      workspace: platform
    defaults:
      run:
        working-directory: platform
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10.13.1
          run_install: false
      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: ${{ inputs.cache && 'pnpm' || '' }}
          cache-dependency-path: 'platform/pnpm-lock.yaml'

      - name: Import environment variables from .env.sample file
        id: import-env
        shell: bash
        run: |
          cat .env.sample | sed 's/#.*$//' | sed '/^[[:space:]]*$/d' >> $GITHUB_ENV
          apps="${{ inputs.apps }}"
          if [[ "$apps" =~ [[:space:]] ]]; then
            scopes="./apps/{$(echo $apps | tr ' ' ',')}"
          else
            scopes="./apps/$apps"
          fi
          echo "SCOPES=${scopes}" >> $GITHUB_ENV

      - name: Install dependencies and setup
        run: |
          pnpm install --frozen-lockfile
          pnpm db:generate

      - name: Lint
        run: |
          pnpm --filter="$SCOPES" typecheck
          pnpm --filter="$SCOPES" lint

      - name: Unit test
        run: pnpm --filter="$SCOPES" test:unit --allowOnly=false

      - name: Integration test
        run: pnpm --filter="$SCOPES" test:it --allowOnly=false

      - name: Build
        if: ${{ inputs.willBuild }}
        run: pnpm --filter="$SCOPES" build:clean
