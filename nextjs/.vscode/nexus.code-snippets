{
  // Place your frontend workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Create Nexus Type": {
    "scope": "typescript",
    "prefix": "bf-nexus-type",
    "body": [
      "import { objectType } from 'nexus'",
      "",
      "export const ${1} = objectType({",
      "  name: '${1}',",
      "  description: 'CHANGEME${0}',",
      "  definition(t) {",
      "    t.nonNull.int('id')",
      "  }",
      "})",
    ]
  },
  "Create Nexus Mutation": {
    "scope": "typescript",
    "prefix": "bf-nexus-mutation",
    "body": [
      "import { idArg, mutationField, nonNull } from 'nexus'",
      "import { ${2:User} } from '../type'",
      "",
      "export const ${1}Mutation = mutationField('${1}', {",
      "  type: nonNull(${2:User}),",
      "  description: 'Mutate ${2}',",
      "  authorize: (_, __, ctx) => Boolean(ctx.user),",
      "  args: { id: nonNull(idArg({ description: 'ID of the ${2}' })) },",
      "  resolve: async (_, { id }, { prisma }) => {",
      "    const obj = await prisma./* CHANGEME${0} */.findUniqueOrThrow({ where: { id: Number(id) } })",
      "    return obj /* CHANGEME */",
      "  }",
      "})",
    ]
  },
  "Create Nexus Query": {
    "scope": "typescript",
    "prefix": "bf-nexus-query",
    "body": [
      "import { idArg, nonNull, queryField } from 'nexus'",
      "import { ${2:User} } from '../type'",
      "",
      "export const get${2}Query = queryField('${1:viewer}', {",
      "  type: nonNull(${2}),",
      "  description: 'Query ${2}',",
      "  authorize: (_root, _args, ctx) => Boolean(ctx.user),",
      "  args: { id: nonNull(idArg({ description: 'ID of the ${2}' })) },",
      "  resolve: (_, { id }, { prisma }) => prisma./* CHANGEME${0} */.findUniqueOrThrow({ where: { id: Number(id) } }),",
      "})",
    ]
  },
}
