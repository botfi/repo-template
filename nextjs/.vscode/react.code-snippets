{
  // Place your frontend workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Create Next Page": {
    "scope": "typescriptreact",
    "prefix": "bf-react-page",
    "body": [
      "import { use${1:GetViewer}Query } from '@/generated/hooks'",
      "import type { NextLayoutPage } from 'next'",
      "import { AuthAction, withAuthUser, withAuthUserTokenSSR } from 'next-firebase-auth'",
      "",
      "interface Props {}",
      "",
      "const Page: NextLayoutPage<Props> = () => {",
      "  const { loading, error, data } = use${1:GetViewer}Query()",
      "",
      "  if (error) throw error",
      "  if (loading) return <>Loading</>",
      "  if (!data) return <>No data</>",
      "",
      "  return <pre>{JSON.stringify(data, undefined, 2)}</pre>${0}",
      "}",
      "",
      "Page.title = '${2:Page-Title}'",
      "// Page.getLayout = getLayout",
      "",
      "export const getServerSideProps = withAuthUserTokenSSR({",
      "  whenUnauthed: AuthAction.REDIRECT_TO_LOGIN,",
      "})()",
      "",
      "export default withAuthUser<Props>({",
      "  whenUnauthedBeforeInit: AuthAction.RETURN_NULL,",
      "})(Page)"
    ]
  },
  "Create Screen": {
    "scope": "typescriptreact",
    "prefix": "bf-react-screen",
    "body": [
      "interface Props {",
      "  loading?: boolean",
      "}",
      "",
      "export const ${1:/* MyBusiness */}Screen: React.FC<Props> = ({loading = false, ...props}) => {",
      "  if (loading) return <>Loading...</>",
      "",
      "  return <pre>{JSON.stringify(props, undefined, 2)}</pre>${0}",
      "}"
    ]
  },
  "Create Component": {
    "scope": "typescriptreact",
    "prefix": "bf-react-component",
    "body": [
      "interface Props {}",
      "",
      "export const ${1:/* MyComponent */}${2| ,Page|}: React.FC<Props> = (props) => {",
      "  return <pre>{JSON.stringify(props, undefined, 2)}</pre>${0}",
      "}"
    ]
  },
  "Create Event Handler": {
    "scope": "typescriptreact,typescript",
    "prefix": "bf-react-handler",
    "body": [
      "const handle${1:SomeEvent}: ${2|MouseEventHandler,ChangeEventHandler</* CHANGEME */>|} = (_e) => {",
      "  /** Do something */${0}",
      "}",
    ]
  },
  "Create Event Handler Factory": {
    "scope": "typescriptreact,typescript",
    "prefix": "bf-react-handler-factory",
    "body": [
      "const createHandle${1:SomeEvent} =",
      "  (args: /* CHANGEME */): ${2|MouseEventHandler,ChangeEventHandler</* CHANGEME */>|} =>",
      "  (_e) => {",
      "    /** Do something */${0}",
      "  }",
    ]
  },
}
